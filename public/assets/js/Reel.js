/* app/components/Reel.html generated by Svelte v1.49.1 */
var Reel = (function() { "use strict";

	function data() {
	return {
		token: "jj"
	}
};

	function oncreate() {

	$.ajax({
		url: "https://www.googleapis.com/storage/v1/b/simon-layfield-site/o?prefix=auto/" + content,
		method: "GET",
		success: function(response) {
			var list = response.items.map(function(item) {
				return {"image": item.name};
			});
			processImages(list);

		}
	});

	function processImages(list) {

		var listInspire = list.reverse();

	            var columnHeights = [],
	                imagelists = document.querySelectorAll('.imagelist'),
	                imageIncrement = 9,
	                n = 0,
	                scrollEnabled = true;

	            var shortestColumn = function(arr) {
	                var lowest = 0;
	                for (var i = 1; i < arr.length; i++) {
	                    if (arr[i] < arr[lowest]) lowest = i;
	                }
	                return lowest;
	            }

	            function insertImage(image, nextImage, lastImage) {

	                [].forEach.call(imagelists, function(list, index) {
	                    columnHeights[index] = list.offsetHeight;
	                });

	                var column = shortestColumn(columnHeights);

	                imagelists[column].appendChild(image);

	                setTimeout(function() {
	                    image.className = 'loaded';
	                    if (nextImage == lastImage) {
	                        scrollEnabled = true;
	                    }
	                }, 500);

	            }

	            function loadImage(nextImage, lastImage) {

	                if (nextImage.indexOf('.webm') > 0) {
	                    var video = document.createElement('video');
	                    video.autoplay = true;
	                    video.loop = true;
	                    video.controls = "controls";

	                    var source = document.createElement('source');
	                    source.src = 'https://storage.googleapis.com/simon-layfield-site/' + nextImage;
	                    source.type = "video/webm";
	                    video.appendChild(source);

	                    video.addEventListener('loadeddata', function() {
	                        insertImage(video);
	                    }, false);

	                } else {

	                    var img = new Image();
	                    img.src = 'https://storage.googleapis.com/simon-layfield-site/' + nextImage;
	                    img.className = 'loaded';
	                    img.onload = function() {
	                        insertImage(img);
	                    };

	                }

	            }

	            function cycleImages() {

	                scrollEnabled = false;

	                if (n == listInspire.length) {
	                    scrollEnabled = false;
	                    return;
	                }

	                if (n + imageIncrement > listInspire.length) {
	                    var limit = listInspire.length;
	                } else {
	                    var limit = n + imageIncrement;
	                }

	                var lastImage = ractive.get('imageList.' + (limit - 1) + '.image');

	                for (var i = n; i < limit; i++) {
	                    var nextImage = ractive.get('imageList.' + i + '.image');
	                    loadImage(nextImage, lastImage);
	                }

	                n = n + imageIncrement;

	            }

	            // cycleImages();

	            window.onscroll = function(ev) {
	                if ((window.innerHeight + window.scrollY) >= (document.body.offsetHeight - 100)) {
	                    if (scrollEnabled) {
	                        cycleImages();
	                    }
	                }
	            };
	}


	    };

	function create_main_fragment(state, component) {
		var div, text, text_2, div_1, text_3, div_2;

		return {
			c: function create() {
				div = createElement("div");
				text = createText(state.token);
				text_2 = createText("\n");
				div_1 = createElement("div");
				text_3 = createText("\n");
				div_2 = createElement("div");
				this.h();
			},

			h: function hydrate() {
				setStyle(div, "padding-bottom", "0px");
				div.className = "imagelist";
				setStyle(div_1, "padding-bottom", "2px");
				div_1.className = "imagelist";
				setStyle(div_2, "padding-bottom", "5px");
				div_2.className = "imagelist";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(text, div);
				insertNode(text_2, target, anchor);
				insertNode(div_1, target, anchor);
				insertNode(text_3, target, anchor);
				insertNode(div_2, target, anchor);
			},

			p: function update(changed, state) {
				if (changed.token) {
					text.data = state.token;
				}
			},

			u: function unmount() {
				detachNode(div);
				detachNode(text_2);
				detachNode(div_1);
				detachNode(text_3);
				detachNode(div_2);
			},

			d: noop
		};
	}

	function Reel(options) {
		init(this, options);
		this._state = assign(data(), options.data);

		var _oncreate = oncreate.bind(this);

		if (!options.root) {
			this._oncreate = [_oncreate];
		} else {
		 	this.root._oncreate.push(_oncreate);
		 }

		this._fragment = create_main_fragment(this._state, this);

		if (options.target) {
			this._fragment.c();
			this._fragment.m(options.target, options.anchor || null);

			callAll(this._oncreate);
		}
	}

	assign(Reel.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount
	 });

	Reel.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function noop() {}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function assign(target) {
		var k,
			source,
			i = 1,
			len = arguments.length;
		for (; i < len; i++) {
			source = arguments[i];
			for (k in source) target[k] = source[k];
		}

		return target;
	}

	function callAll(fns) {
		while (fns && fns.length) fns.pop()();
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign({}, oldState, newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment.m(target, anchor);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function blankObject() {
		return Object.create(null);
	}

	function differs(a, b) {
		return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return Reel;
}());