/* app/components/Showcase.html generated by Svelte v1.49.1 */
var Showcase = (function() { "use strict";

	function data() {
	return {
		items: false
	}
};

	function encapsulateStyles(node) {
		setAttribute(node, "svelte-1515343648", "");
	}

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-1515343648-style';
		style.textContent = "[svelte-1515343648].simple,[svelte-1515343648] .simple,[svelte-1515343648].detailed,[svelte-1515343648] .detailed{width:100%;display:grid;grid-template-columns:1fr;grid-gap:20px;text-align:center}[svelte-1515343648].mosaic,[svelte-1515343648] .mosaic{-moz-column-count:3;-moz-column-gap:20px;-webkit-column-count:3;-webkit-column-gap:0;column-count:3;column-gap:20px;text-align:center}[svelte-1515343648].mosaic img,[svelte-1515343648] .mosaic img{margin-bottom:20px}[svelte-1515343648].project__details,[svelte-1515343648] .project__details{border:1px solid #ccc}@media(min-width: 500px){[svelte-1515343648].simple,[svelte-1515343648] .simple,[svelte-1515343648].detailed,[svelte-1515343648] .detailed{grid-template-columns:repeat(2, 1fr)}}@media(min-width: 1200px){[svelte-1515343648].simple,[svelte-1515343648] .simple,[svelte-1515343648].detailed,[svelte-1515343648] .detailed{grid-template-columns:repeat(4, 1fr)}}";
		appendNode(style, document.head);
	}

	function create_main_fragment(state, component) {
		var div, div_1, div_1_class_value;

		var current_block_type = select_block_type_1(state);
		var if_block = current_block_type(state, component);

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				if_block.c();
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(div);
				div_1.className = div_1_class_value = "container " + state.type;
				div.className = "row";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				if_block.m(div_1, null);
			},

			p: function update(changed, state) {
				if (current_block_type === (current_block_type = select_block_type_1(state)) && if_block) {
					if_block.p(changed, state);
				} else {
					if_block.u();
					if_block.d();
					if_block = current_block_type(state, component);
					if_block.c();
					if_block.m(div_1, null);
				}

				if ((changed.type) && div_1_class_value !== (div_1_class_value = "container " + state.type)) {
					div_1.className = div_1_class_value;
				}
			},

			u: function unmount() {
				detachNode(div);
				if_block.u();
			},

			d: function destroy() {
				if_block.d();
			}
		};
	}

	// (4:3) {{#each assets as asset}}
	function create_each_block(state, assets, asset, asset_index, component) {
		var img, img_src_value;

		return {
			c: function create() {
				img = createElement("img");
				this.h();
			},

			h: function hydrate() {
				img.src = img_src_value = asset.image;
				img.alt = '';
			},

			m: function mount(target, anchor) {
				insertNode(img, target, anchor);
			},

			p: function update(changed, state, assets, asset, asset_index) {
				if ((changed.assets) && img_src_value !== (img_src_value = asset.image)) {
					img.src = img_src_value;
				}
			},

			u: function unmount() {
				detachNode(img);
			},

			d: noop
		};
	}

	// (8:3) {{#each assets as asset}}
	function create_each_block_1(state, assets, asset, asset_index, component) {
		var div, img, img_src_value;

		return {
			c: function create() {
				div = createElement("div");
				img = createElement("img");
				this.h();
			},

			h: function hydrate() {
				img.src = img_src_value = asset.image;
				img.alt = '';
				div.className = "project project--branding";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(img, div);
			},

			p: function update(changed, state, assets, asset, asset_index) {
				if ((changed.assets) && img_src_value !== (img_src_value = asset.image)) {
					img.src = img_src_value;
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (14:3) {{#each assets as asset}}
	function create_each_block_2(state, assets, asset, asset_index, component) {
		var div, text, div_1, a, img, img_src_value, text_1, h3, text_2_value = asset.name, text_2, a_href_value;

		var current_block_type = select_block_type(state, assets, asset, asset_index);
		var if_block = current_block_type(state, assets, asset, asset_index, component);

		return {
			c: function create() {
				div = createElement("div");
				if_block.c();
				text = createText("\n\t\t\t\t\t");
				div_1 = createElement("div");
				a = createElement("a");
				img = createElement("img");
				text_1 = createText("\n\t\t\t\t\t\t\t");
				h3 = createElement("h3");
				text_2 = createText(text_2_value);
				this.h();
			},

			h: function hydrate() {
				img.src = img_src_value = asset.image;
				img.alt = '';
				a.href = a_href_value = asset.url;
				a.target = "_blank";
				div_1.className = "project__details";
				div.className = "project project--web";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				if_block.m(div, null);
				appendNode(text, div);
				appendNode(div_1, div);
				appendNode(a, div_1);
				appendNode(img, a);
				appendNode(text_1, a);
				appendNode(h3, a);
				appendNode(text_2, h3);
			},

			p: function update(changed, state, assets, asset, asset_index) {
				if (current_block_type !== (current_block_type = select_block_type(state, assets, asset, asset_index))) {
					if_block.u();
					if_block.d();
					if_block = current_block_type(state, assets, asset, asset_index, component);
					if_block.c();
					if_block.m(div, text);
				}

				if ((changed.assets) && img_src_value !== (img_src_value = asset.image)) {
					img.src = img_src_value;
				}

				if ((changed.assets) && text_2_value !== (text_2_value = asset.name)) {
					text_2.data = text_2_value;
				}

				if ((changed.assets) && a_href_value !== (a_href_value = asset.url)) {
					a.href = a_href_value;
				}
			},

			u: function unmount() {
				detachNode(div);
				if_block.u();
			},

			d: function destroy() {
				if_block.d();
			}
		};
	}

	// (16:5) {{#if asset.type === 'commercial'}}
	function create_if_block_3(state, assets, asset, asset_index, component) {
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<span>commercial</span>";
				this.h();
			},

			h: function hydrate() {
				div.className = "projectLabel";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (20:5) {{else}}
	function create_if_block_4(state, assets, asset, asset_index, component) {
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<span>personal</span>";
				this.h();
			},

			h: function hydrate() {
				div.className = "projectLabel projectLabel--alt";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (3:2) {{#if items && type == "mosaic"}}
	function create_if_block(state, component) {
		var each_anchor;

		var assets = state.assets;

		var each_blocks = [];

		for (var i = 0; i < assets.length; i += 1) {
			each_blocks[i] = create_each_block(state, assets, assets[i], i, component);
		}

		return {
			c: function create() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},

			m: function mount(target, anchor) {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insertNode(each_anchor, target, anchor);
			},

			p: function update(changed, state) {
				var assets = state.assets;

				if (changed.assets) {
					for (var i = 0; i < assets.length; i += 1) {
						if (each_blocks[i]) {
							each_blocks[i].p(changed, state, assets, assets[i], i);
						} else {
							each_blocks[i] = create_each_block(state, assets, assets[i], i, component);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = assets.length;
				}
			},

			u: function unmount() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				detachNode(each_anchor);
			},

			d: function destroy() {
				destroyEach(each_blocks);
			}
		};
	}

	// (7:38) 
	function create_if_block_1(state, component) {
		var each_anchor;

		var assets = state.assets;

		var each_blocks = [];

		for (var i = 0; i < assets.length; i += 1) {
			each_blocks[i] = create_each_block_1(state, assets, assets[i], i, component);
		}

		return {
			c: function create() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},

			m: function mount(target, anchor) {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insertNode(each_anchor, target, anchor);
			},

			p: function update(changed, state) {
				var assets = state.assets;

				if (changed.assets) {
					for (var i = 0; i < assets.length; i += 1) {
						if (each_blocks[i]) {
							each_blocks[i].p(changed, state, assets, assets[i], i);
						} else {
							each_blocks[i] = create_each_block_1(state, assets, assets[i], i, component);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = assets.length;
				}
			},

			u: function unmount() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				detachNode(each_anchor);
			},

			d: function destroy() {
				destroyEach(each_blocks);
			}
		};
	}

	// (13:40) 
	function create_if_block_2(state, component) {
		var each_anchor;

		var assets = state.assets;

		var each_blocks = [];

		for (var i = 0; i < assets.length; i += 1) {
			each_blocks[i] = create_each_block_2(state, assets, assets[i], i, component);
		}

		return {
			c: function create() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},

			m: function mount(target, anchor) {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insertNode(each_anchor, target, anchor);
			},

			p: function update(changed, state) {
				var assets = state.assets;

				if (changed.assets) {
					for (var i = 0; i < assets.length; i += 1) {
						if (each_blocks[i]) {
							each_blocks[i].p(changed, state, assets, assets[i], i);
						} else {
							each_blocks[i] = create_each_block_2(state, assets, assets[i], i, component);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = assets.length;
				}
			},

			u: function unmount() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				detachNode(each_anchor);
			},

			d: function destroy() {
				destroyEach(each_blocks);
			}
		};
	}

	// (33:2) {{else}}
	function create_if_block_5(state, component) {
		var p;

		return {
			c: function create() {
				p = createElement("p");
				p.textContent = "No items found";
			},

			m: function mount(target, anchor) {
				insertNode(p, target, anchor);
			},

			p: noop,

			u: function unmount() {
				detachNode(p);
			},

			d: noop
		};
	}

	function select_block_type(state, assets, asset, asset_index) {
		if (asset.type === 'commercial') return create_if_block_3;
		return create_if_block_4;
	}

	function select_block_type_1(state) {
		if (state.items && state.type == "mosaic") return create_if_block;
		if (state.items && state.type == "simple") return create_if_block_1;
		if (state.items && state.type == "detailed") return create_if_block_2;
		return create_if_block_5;
	}

	function Showcase(options) {
		init(this, options);
		this._state = assign(data(), options.data);

		if (!document.getElementById("svelte-1515343648-style")) add_css();

		this._fragment = create_main_fragment(this._state, this);

		if (options.target) {
			this._fragment.c();
			this._fragment.m(options.target, options.anchor || null);
		}
	}

	assign(Showcase.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount
	 });

	Showcase.prototype._recompute = noop;

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function noop() {}

	function createText(data) {
		return document.createTextNode(data);
	}

	function createComment() {
		return document.createComment('');
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function assign(target) {
		var k,
			source,
			i = 1,
			len = arguments.length;
		for (; i < len; i++) {
			source = arguments[i];
			for (k in source) target[k] = source[k];
		}

		return target;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign({}, oldState, newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment.m(target, anchor);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.pop()();
	}

	function differs(a, b) {
		return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return Showcase;
}());