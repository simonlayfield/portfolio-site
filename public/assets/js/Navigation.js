/* app/components/Navigation.html generated by Svelte v1.49.1 */
var Navigation = (function() { "use strict";

	function menuHeight(items) {
	let rowDivisions = items % 2 == 0 ? items / 2 : (items + 1) / 2;
	return rowDivisions * 52;
};

	function data() {
  return {
		  currentPage: null,
		  activeSubMenuItems: [],
		  mobileMenuIsActive: false,
  		  menu: [{
		    "label": "Home",
		    "url": "index.html"
		}, {
		    "label": "Projects",
	  			"url": "#",
		    "sub": [{
		        "label": "Web"
		    }, {
		        "label": "Branding"
		    }, {
		        "label": "Illustration"
		    }]
		}, {
		    "label": "Github",
		    "icon": "github",
		    "url": "https://github.com/simonlayfield/",
		    "flexible": true
		}, {
		    "label": "Contact",
		    "url": "https://aemail.com/Z6J",
		    "flexible": true
		}]
		}
};

	var methods = {
		toggleSub(index) {
			if (this.get('mainMenuIsActive')) {
				this.set({
					mainMenuIsActive: false,
					activeSubMenuItems: []
				});
			} else {
				const menu = this.get('menu');
				this.set({
					mainMenuIsActive: true,
					activeSubMenuItems: menu[index].sub
				});
			}
		},
		toggleMobileMenuState(newState) {
			var self = this;
			if (newState == 'off') {
				self.set({mobileMenuIsActive: false});
				self.switchMobileMenuOff();
			} else if (newState == 'on') {
				self.set({mobileMenuIsActive: true});
				self.switchMobileMenuOn();
			} else {
				if (self.get('mobileMenuIsActive')) {
					self.switchMobileMenuOff();
				} else {
					self.switchMobileMenuOn();
				}
			}
		},
		switchMobileMenuOn() {
			this.set({mobileMenuIsActive: true});
			document.querySelector('.wrap').style.top = '0';
		},
		switchMobileMenuOff() {
			this.set({mobileMenuIsActive: false});
			let menu = this.get('menu'),
				subMenu = this.get('activeSubMenuItems'),
				mainMenuLength = menu.length,
				subMenuLength = subMenu ? this.get('activeSubMenuItems').length : 0,
				totalMenuLength = mainMenuLength + subMenuLength;
			document.querySelector('.wrap').style.top = '-' + menuHeight(totalMenuLength) + 'px';
		},
		resetPage() {
			document.querySelector('.wrap').style.top = '0';
		}
};

	function oncreate() {
	let self = this;

	let mql = window.matchMedia('(max-width: 30em)');

	if (mql.matches) {
		self.set({mainMenuIsActive: false})
		self.switchMobileMenuOff();
	} else {
		self.resetPage();
	}

	function handleMediaQuery(e) {
		if (e.matches) {
			self.switchMobileMenuOff();
		} else {
			self.resetPage();
		}
	}
	mql.addListener(handleMediaQuery);

};

	function encapsulateStyles(node) {
		setAttribute(node, "svelte-70344319", "");
	}

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-70344319-style';
		style.textContent = "[svelte-70344319].nav__item--sub .active,[svelte-70344319] .nav__item--sub .active{text-decoration:underline}[svelte-70344319].nav__item,[svelte-70344319] .nav__item{border:2px solid #fff}@media(min-width: 30em){[svelte-70344319].menu-icon,[svelte-70344319] .menu-icon{display:none}}";
		appendNode(style, document.head);
	}

	function create_main_fragment(state, component) {
		var header, nav, text, text_3, div;

		var menu = state.menu;

		var each_blocks = [];

		for (var i = 0; i < menu.length; i += 1) {
			each_blocks[i] = create_each_block(state, menu, menu[i], i, component);
		}

		var if_block = (state.activeSubMenuItems.length) && create_if_block_3(state, component);

		function click_handler_1(event) {
			component.toggleMobileMenuState();
		}

		return {
			c: function create() {
				header = createElement("header");
				nav = createElement("nav");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text = createText("\n\n\t\t");
				if (if_block) if_block.c();
				text_3 = createText("\n\n");
				div = createElement("div");
				div.textContent = "menu";
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(header);
				nav.className = "nav-bar";
				encapsulateStyles(div);
				div.className = "menu-icon lsf";
				addListener(div, "click", click_handler_1);
			},

			m: function mount(target, anchor) {
				insertNode(header, target, anchor);
				appendNode(nav, header);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(nav, null);
				}

				appendNode(text, nav);
				if (if_block) if_block.m(nav, null);
				insertNode(text_3, target, anchor);
				insertNode(div, target, anchor);
			},

			p: function update(changed, state) {
				var menu = state.menu;

				if (changed.menu) {
					for (var i = 0; i < menu.length; i += 1) {
						if (each_blocks[i]) {
							each_blocks[i].p(changed, state, menu, menu[i], i);
						} else {
							each_blocks[i] = create_each_block(state, menu, menu[i], i, component);
							each_blocks[i].c();
							each_blocks[i].m(nav, text);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = menu.length;
				}

				if (state.activeSubMenuItems.length) {
					if (if_block) {
						if_block.p(changed, state);
					} else {
						if_block = create_if_block_3(state, component);
						if_block.c();
						if_block.m(nav, null);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}
			},

			u: function unmount() {
				detachNode(header);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				if (if_block) if_block.u();
				detachNode(text_3);
				detachNode(div);
			},

			d: function destroy() {
				destroyEach(each_blocks);

				if (if_block) if_block.d();
				removeListener(div, "click", click_handler_1);
			}
		};
	}

	// (3:8) {{#each menu as menuItem}}
	function create_each_block(state, menu, menuItem, menuItem_index, component) {
		var li;

		var current_block_type = select_block_type(state, menu, menuItem, menuItem_index);
		var if_block = current_block_type(state, menu, menuItem, menuItem_index, component);

		return {
			c: function create() {
				li = createElement("li");
				if_block.c();
				this.h();
			},

			h: function hydrate() {
				li.className = "nav__item";
			},

			m: function mount(target, anchor) {
				insertNode(li, target, anchor);
				if_block.m(li, null);
			},

			p: function update(changed, state, menu, menuItem, menuItem_index) {
				if (current_block_type === (current_block_type = select_block_type(state, menu, menuItem, menuItem_index)) && if_block) {
					if_block.p(changed, state, menu, menuItem, menuItem_index);
				} else {
					if_block.u();
					if_block.d();
					if_block = current_block_type(state, menu, menuItem, menuItem_index, component);
					if_block.c();
					if_block.m(li, null);
				}
			},

			u: function unmount() {
				detachNode(li);
				if_block.u();
			},

			d: function destroy() {
				if_block.d();
			}
		};
	}

	// (5:4) {{#if menuItem.icon}}
	function create_if_block(state, menu, menuItem, menuItem_index, component) {
		var a, text_value = menuItem.label, text, a_href_value, a_title_value;

		return {
			c: function create() {
				a = createElement("a");
				text = createText(text_value);
				this.h();
			},

			h: function hydrate() {
				a.href = a_href_value = menuItem.url ? menuItem.url : '';
				a.title = a_title_value = menuItem.icon;
				a.target = "_blank";
				a.className = "link lsf-icon";
			},

			m: function mount(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(text, a);
			},

			p: function update(changed, state, menu, menuItem, menuItem_index) {
				if ((changed.menu) && text_value !== (text_value = menuItem.label)) {
					text.data = text_value;
				}

				if ((changed.menu) && a_href_value !== (a_href_value = menuItem.url ? menuItem.url : '')) {
					a.href = a_href_value;
				}

				if ((changed.menu) && a_title_value !== (a_title_value = menuItem.icon)) {
					a.title = a_title_value;
				}
			},

			u: function unmount() {
				detachNode(a);
			},

			d: noop
		};
	}

	// (8:5) {{#if menuItem.label == "Projects"}}
	function create_if_block_1(state, menu, menuItem, menuItem_index, component) {
		var a, text_value = menuItem.label, text;

		return {
			c: function create() {
				a = createElement("a");
				text = createText(text_value);
				this.h();
			},

			h: function hydrate() {
				a.href = "#";
				a.className = "link";
				addListener(a, "click", click_handler);

				a._svelte = {
					component: component
				};
			},

			m: function mount(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(text, a);
			},

			p: function update(changed, state, menu, menuItem, menuItem_index) {
				if ((changed.menu) && text_value !== (text_value = menuItem.label)) {
					text.data = text_value;
				}
			},

			u: function unmount() {
				detachNode(a);
			},

			d: function destroy() {
				removeListener(a, "click", click_handler);
			}
		};
	}

	// (10:5) {{else}}
	function create_if_block_2(state, menu, menuItem, menuItem_index, component) {
		var a, text_value = menuItem.label, text, a_href_value;

		return {
			c: function create() {
				a = createElement("a");
				text = createText(text_value);
				this.h();
			},

			h: function hydrate() {
				a.href = a_href_value = menuItem.url ? menuItem.url : '#';
				a.className = "link";
			},

			m: function mount(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(text, a);
			},

			p: function update(changed, state, menu, menuItem, menuItem_index) {
				if ((changed.menu) && text_value !== (text_value = menuItem.label)) {
					text.data = text_value;
				}

				if ((changed.menu) && a_href_value !== (a_href_value = menuItem.url ? menuItem.url : '#')) {
					a.href = a_href_value;
				}
			},

			u: function unmount() {
				detachNode(a);
			},

			d: noop
		};
	}

	// (20:3) {{#each menu[1].sub as item}}
	function create_each_block_1(state, sub, item, item_index, component) {
		var li, a, text_value = item.label, text, a_href_value, a_class_value;

		return {
			c: function create() {
				li = createElement("li");
				a = createElement("a");
				text = createText(text_value);
				this.h();
			},

			h: function hydrate() {
				a.href = a_href_value = "/" + item.label.toLowerCase();
				a.className = a_class_value = state.currentPage == item.label ? 'active' : '';
				li.className = "nav__item nav__item--sub";
			},

			m: function mount(target, anchor) {
				insertNode(li, target, anchor);
				appendNode(a, li);
				appendNode(text, a);
			},

			p: function update(changed, state, sub, item, item_index) {
				if ((changed.menu) && text_value !== (text_value = item.label)) {
					text.data = text_value;
				}

				if ((changed.menu) && a_href_value !== (a_href_value = "/" + item.label.toLowerCase())) {
					a.href = a_href_value;
				}

				if ((changed.currentPage || changed.menu) && a_class_value !== (a_class_value = state.currentPage == item.label ? 'active' : '')) {
					a.className = a_class_value;
				}
			},

			u: function unmount() {
				detachNode(li);
			},

			d: noop
		};
	}

	// (18:2) {{#if activeSubMenuItems.length}}
	function create_if_block_3(state, component) {
		var break_1, text, each_anchor;

		var sub = state.menu[1].sub;

		var each_blocks = [];

		for (var i = 0; i < sub.length; i += 1) {
			each_blocks[i] = create_each_block_1(state, sub, sub[i], i, component);
		}

		return {
			c: function create() {
				break_1 = createElement("break");
				text = createText("\n\t\t\t");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},

			m: function mount(target, anchor) {
				insertNode(break_1, target, anchor);
				insertNode(text, target, anchor);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insertNode(each_anchor, target, anchor);
			},

			p: function update(changed, state) {
				var sub = state.menu[1].sub;

				if (changed.menu || changed.currentPage) {
					for (var i = 0; i < sub.length; i += 1) {
						if (each_blocks[i]) {
							each_blocks[i].p(changed, state, sub, sub[i], i);
						} else {
							each_blocks[i] = create_each_block_1(state, sub, sub[i], i, component);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = sub.length;
				}
			},

			u: function unmount() {
				detachNode(break_1);
				detachNode(text);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				detachNode(each_anchor);
			},

			d: function destroy() {
				destroyEach(each_blocks);
			}
		};
	}

	function click_handler(event) {
		var component = this._svelte.component;
		component.toggleSub(1);
	}

	function select_block_type(state, menu, menuItem, menuItem_index) {
		if (menuItem.icon) return create_if_block;
		if (menuItem.label == "Projects") return create_if_block_1;
		return create_if_block_2;
	}

	function Navigation(options) {
		init(this, options);
		this._state = assign(data(), options.data);
		this._recompute({ items: 1 }, this._state);

		if (!document.getElementById("svelte-70344319-style")) add_css();

		var _oncreate = oncreate.bind(this);

		if (!options.root) {
			this._oncreate = [_oncreate];
		} else {
		 	this.root._oncreate.push(_oncreate);
		 }

		this._fragment = create_main_fragment(this._state, this);

		if (options.target) {
			this._fragment.c();
			this._fragment.m(options.target, options.anchor || null);

			callAll(this._oncreate);
		}
	}

	assign(Navigation.prototype, methods, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount
	 });

	Navigation.prototype._recompute = function _recompute(changed, state) {
		if (changed.items) {
			if (differs(state.menuHeight, (state.menuHeight = menuHeight(state.items)))) changed.menuHeight = true;
		}
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function noop() {}

	function createComment() {
		return document.createComment('');
	}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function assign(target) {
		var k,
			source,
			i = 1,
			len = arguments.length;
		for (; i < len; i++) {
			source = arguments[i];
			for (k in source) target[k] = source[k];
		}

		return target;
	}

	function callAll(fns) {
		while (fns && fns.length) fns.pop()();
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign({}, oldState, newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment.m(target, anchor);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function differs(a, b) {
		return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return Navigation;
}());